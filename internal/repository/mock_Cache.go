// Code generated by mockery v2.39.1. DO NOT EDIT.

package repository

import mock "github.com/stretchr/testify/mock"

// MockCache is an autogenerated mock type for the Cache type
type MockCache struct {
	mock.Mock
}

type MockCache_Expecter struct {
	mock *mock.Mock
}

func (_m *MockCache) EXPECT() *MockCache_Expecter {
	return &MockCache_Expecter{mock: &_m.Mock}
}

// Delete provides a mock function with given fields: key
func (_m *MockCache) Delete(key string) error {
	ret := _m.Called(key)

	if len(ret) == 0 {
		panic("no return value specified for Delete")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(string) error); ok {
		r0 = rf(key)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockCache_Delete_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Delete'
type MockCache_Delete_Call struct {
	*mock.Call
}

// Delete is a helper method to define mock.On call
//   - key string
func (_e *MockCache_Expecter) Delete(key interface{}) *MockCache_Delete_Call {
	return &MockCache_Delete_Call{Call: _e.mock.On("Delete", key)}
}

func (_c *MockCache_Delete_Call) Run(run func(key string)) *MockCache_Delete_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *MockCache_Delete_Call) Return(err error) *MockCache_Delete_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockCache_Delete_Call) RunAndReturn(run func(string) error) *MockCache_Delete_Call {
	_c.Call.Return(run)
	return _c
}

// DeleteAll provides a mock function with given fields:
func (_m *MockCache) DeleteAll() error {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for DeleteAll")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func() error); ok {
		r0 = rf()
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockCache_DeleteAll_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteAll'
type MockCache_DeleteAll_Call struct {
	*mock.Call
}

// DeleteAll is a helper method to define mock.On call
func (_e *MockCache_Expecter) DeleteAll() *MockCache_DeleteAll_Call {
	return &MockCache_DeleteAll_Call{Call: _e.mock.On("DeleteAll")}
}

func (_c *MockCache_DeleteAll_Call) Run(run func()) *MockCache_DeleteAll_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockCache_DeleteAll_Call) Return(err error) *MockCache_DeleteAll_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockCache_DeleteAll_Call) RunAndReturn(run func() error) *MockCache_DeleteAll_Call {
	_c.Call.Return(run)
	return _c
}

// Get provides a mock function with given fields: key
func (_m *MockCache) Get(key string) (string, error) {
	ret := _m.Called(key)

	if len(ret) == 0 {
		panic("no return value specified for Get")
	}

	var r0 string
	var r1 error
	if rf, ok := ret.Get(0).(func(string) (string, error)); ok {
		return rf(key)
	}
	if rf, ok := ret.Get(0).(func(string) string); ok {
		r0 = rf(key)
	} else {
		r0 = ret.Get(0).(string)
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(key)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockCache_Get_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Get'
type MockCache_Get_Call struct {
	*mock.Call
}

// Get is a helper method to define mock.On call
//   - key string
func (_e *MockCache_Expecter) Get(key interface{}) *MockCache_Get_Call {
	return &MockCache_Get_Call{Call: _e.mock.On("Get", key)}
}

func (_c *MockCache_Get_Call) Run(run func(key string)) *MockCache_Get_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *MockCache_Get_Call) Return(value string, err error) *MockCache_Get_Call {
	_c.Call.Return(value, err)
	return _c
}

func (_c *MockCache_Get_Call) RunAndReturn(run func(string) (string, error)) *MockCache_Get_Call {
	_c.Call.Return(run)
	return _c
}

// Set provides a mock function with given fields: key, value
func (_m *MockCache) Set(key string, value interface{}) error {
	ret := _m.Called(key, value)

	if len(ret) == 0 {
		panic("no return value specified for Set")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(string, interface{}) error); ok {
		r0 = rf(key, value)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockCache_Set_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Set'
type MockCache_Set_Call struct {
	*mock.Call
}

// Set is a helper method to define mock.On call
//   - key string
//   - value interface{}
func (_e *MockCache_Expecter) Set(key interface{}, value interface{}) *MockCache_Set_Call {
	return &MockCache_Set_Call{Call: _e.mock.On("Set", key, value)}
}

func (_c *MockCache_Set_Call) Run(run func(key string, value interface{})) *MockCache_Set_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string), args[1].(interface{}))
	})
	return _c
}

func (_c *MockCache_Set_Call) Return(err error) *MockCache_Set_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockCache_Set_Call) RunAndReturn(run func(string, interface{}) error) *MockCache_Set_Call {
	_c.Call.Return(run)
	return _c
}

// Shutdown provides a mock function with given fields:
func (_m *MockCache) Shutdown() error {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Shutdown")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func() error); ok {
		r0 = rf()
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockCache_Shutdown_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Shutdown'
type MockCache_Shutdown_Call struct {
	*mock.Call
}

// Shutdown is a helper method to define mock.On call
func (_e *MockCache_Expecter) Shutdown() *MockCache_Shutdown_Call {
	return &MockCache_Shutdown_Call{Call: _e.mock.On("Shutdown")}
}

func (_c *MockCache_Shutdown_Call) Run(run func()) *MockCache_Shutdown_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockCache_Shutdown_Call) Return(err error) *MockCache_Shutdown_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockCache_Shutdown_Call) RunAndReturn(run func() error) *MockCache_Shutdown_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockCache creates a new instance of MockCache. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockCache(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockCache {
	mock := &MockCache{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
